{"version":3,"sources":["../scripts.babel/sirServices.js"],"names":[],"mappings":"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","file":"sirServices.js","sourcesContent":["\nsirPastesAlot.factory('sirServices', ['$q',\n  function($q) {\n    var api = {};\n\n    api.getBins = function() {\n      var deferred = $q.defer();\n\n      chrome.storage.sync.get([\"sirPasteBins\"], function(result) {\n        if (chrome.runtime.lastError) {\n          deferred.reject(\"Could not load paste bins from chrome storage: \" + chrome.runtime.lastError.message);\n        }\n        else {\n          if (typeof result.sirPasteBins === 'undefined') {\n            deferred.reject(\"Undefined\");\n          }\n          else {\n            deferred.resolve(result.sirPasteBins);\n          }\n        }\n\n      });\n\n      return deferred.promise;\n    };\n\n\n    api.chromeSet = function(save) {\n      chrome.storage.sync.set(save, function() {\n        console.log(\"Settings saved!\");\n      });\n    };\n\n\n    api.addBin = function(newBin) {\n      var save = {};\n      var self = this;\n      var deferred = $q.defer();\n      this.getBins().then(function(currentBins) {\n        if (currentBins.length >= 1) {\n          currentBins.push(newBin);\n        }\n        else {\n          currentBins = [newBin];\n        }\n\n        save[\"sirPasteBins\"] = currentBins;\n        self.chromeSet(save);\n        deferred.resolve(save[\"sirPasteBins\"]);\n      });\n      return deferred.promise;\n    };\n\n    api.cutBin = function(key) {\n      var save = {};\n      var deferred = $q.defer();\n      var self = this;\n      this.getBins().then(function(currentBins) {\n        currentBins.splice(key, 1);\n        save[\"sirPasteBins\"] = currentBins;\n        self.chromeSet(save);\n        deferred.resolve(save[\"sirPasteBins\"]);\n      }, function(response) {\n        deferred.reject(response);\n      });\n\n      return deferred.promise;\n    };\n\n    // Refactor to allow name, class and other things.\n    api.pasteBin = function(bin) {\n      var deferred = $q.defer();\n\n      chrome.tabs.query({\n        active: true,\n        lastFocusedWindow: true\n      }, function(tab) {\n        tab = tab[0];\n        chrome.tabs.sendRequest(tab.id, {command: \"pasteBin\", bin: bin}, function(response) {\n          if (response.result) {\n            deferred.resolve();\n          }\n          else {\n            deferred.reject();\n          }\n        });\n      });\n      return deferred.promise;\n    };\n\n    return api;\n  }\n]);\n"]}